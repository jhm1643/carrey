package com.nexus.push.controller;

import java.net.HttpURLConnection;

import javax.net.ssl.HttpsURLConnection;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.nexus.push.domain.HttpStatusDomain;
import com.nexus.push.domain.PushDomain;
import com.nexus.push.httpClient.HttpResponseEntity;
import com.nexus.push.service.PushServiceImpl;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class PushController {
	
	@Autowired
	private PushServiceImpl pushService;
	
	static final String CODE_400_DATA_ERROR="Received data is null";
	static final String CODE_400_DEVICE_ERROR="Device name is android or ios";
	static final String CODE_400_TOKEN_ERROR="Token value is empty";

	@RequestMapping(value = "/nexus/push" , method = RequestMethod.POST)
	public ResponseEntity<HttpStatusDomain> push(@RequestBody PushDomain pushDomain,HttpServletRequest request, HttpServletResponse res){
		logger.info("PUSH EXECUTE!!!");
		HttpResponseEntity resResult = new HttpResponseEntity();
		HttpStatusDomain httpStatusDomain= new HttpStatusDomain();
		try{
			//NO DATA
			if(pushDomain==null) {
				//httpStatusDomain=new HttpStatusDomain(400,CODE_400_DATA_ERROR);
				//error_message = CODE_400_DATA_ERROR;
				logger.info("PUSH FAIL 400 error : "+CODE_400_DATA_ERROR);
				return resResult.httpResponse("PUSH FAIL",400,CODE_400_DATA_ERROR);
			}
			//NO DEVICE
			else if(pushDomain.getDevice()==null || pushDomain.getDevice().equals("")){
				//httpStatusDomain=new HttpStatusDomain(400,CODE_400_DEVICE_ERROR);
				//http_status_code = 400;
				//error_message = CODE_400_DEVICE_ERROR;
				logger.info("PUSH FAIL 400 error : "+CODE_400_DEVICE_ERROR);
				return resResult.httpResponse("PUSH FAIL",400,CODE_400_DEVICE_ERROR);
			}else if(!(pushDomain.getDevice().equals("ios") || pushDomain.getDevice().equals("android"))){
				//httpStatusDomain=new HttpStatusDomain(400,CODE_400_DEVICE_ERROR);	
				//http_status_code = 400;
				//error_message = CODE_400_DEVICE_ERROR;
				logger.info("PUSH FAIL 400 error : "+CODE_400_DEVICE_ERROR);
				return resResult.httpResponse("PUSH FAIL",400,CODE_400_DEVICE_ERROR);
			}
			//NO DEVICE TOKEN
			else if(pushDomain.getDevice_token()==null || pushDomain.getDevice_token().equals("")) {
				//httpStatusDomain=new HttpStatusDomain(400,CODE_400_TOKEN_ERROR);
				//http_status_code = 400;
				//error_message = CODE_400_TOKEN_ERROR;
				logger.info("PUSH FAIL 400 error : "+CODE_400_TOKEN_ERROR);
				return resResult.httpResponse("PUSH FAIL",400,CODE_400_TOKEN_ERROR);
			}
			//PUSH START
			//String pushResult="";
			switch(pushDomain.getDevice()) {
				case "ios" : 
					httpStatusDomain=pushService.apnsPush(pushDomain);
					break;
					/*http_status_code = httpStatusDomain.getCode();
					error_message = httpStatusDomain.getErrorMessage();*/
					/*if(httpStatusDomain.getCode()==200) {
						return resResult.httpResponse("PUSH SUCCESS",200,error_message);
					}else if(httpStatusDomain.getCode()>=300) {
						error_message=httpStatusDomain.getErrorMessage();
						return resResult.httpResponse("PUSH FAIL",500,error_message);
					}*/
				case "android" : 
					httpStatusDomain=pushService.fcmPush(pushDomain);
					break;
					/*http_status_code = httpStatusDomain.getCode();
					error_message = httpStatusDomain.getErrorMessage();*/
					/*if(httpStatusDomain.getCode()==200) {
						return resResult.httpResponse("PUSH SUCCESS",200,error_message);
					}else if(httpStatusDomain.getCode()>=300) {
						error_message=httpStatusDomain.getErrorMessage();
						return resResult.httpResponse("PUSH FAIL",500,error_message);
					}*/
			}
			int result_code=httpStatusDomain.getCode();
			String error_message=httpStatusDomain.getErrorMessage();
			
			if(result_code==200) {
				logger.info("PUSH SUCCESS");
				return resResult.httpResponse("PUSH SUCCESS",200,"");
			}else if(error_message.equals("BadDeviceToken")){
				logger.info("PUSH FAIL 400 error : "+httpStatusDomain.getErrorMessage());
				return resResult.httpResponse("PUSH FAIL",400,httpStatusDomain.getErrorMessage());
			}else if(error_message.equals("The registration token is not a valid FCM registration token")){
				logger.info("PUSH FAIL 400 error : "+httpStatusDomain.getErrorMessage());
				return resResult.httpResponse("PUSH FAIL",400,httpStatusDomain.getErrorMessage());
			}else{
				logger.info("PUSH FAIL 500 error : "+httpStatusDomain.getErrorMessage());
				return resResult.httpResponse("PUSH FAIL",500,httpStatusDomain.getErrorMessage());
			}
			//PUSH SUCCESS
			/*if(pushResult==null) {
				logger.info("PUSH SUCCESS");
				return resResult.httpResponse("PUSH SUCCESS",200,error_message);
			}*/
			
			//pushResult값에 값이 있을 경우 PUSH FAIL
			/*else {
				error_message=pushResult;
				logger.info("PUSH FAIL 400 error : "+error_message);
				return resResult.httpResponse("PUSH FAIL",400,error_message);
			}*/
		
		/*if(http_status_code<300) {
			return resResult.httpResponse("PUSH SUCCESS",200,"");
		}else if(http_status_code>=300) {
			return resResult.httpResponse("PUSH FAIL",200,"");
		}
		
		logger.info("PUSH FAIL 400 error : "+error_message);
		return resResult.httpResponse("PUSH FAIL",400,error_message);*/
		}catch(Exception e) {
			e.printStackTrace();
			logger.info("PUSH FAIL 500 error : "+e.toString());
			return resResult.httpResponse("PUSH FAIL",500,e.toString());
		}
	}
}
