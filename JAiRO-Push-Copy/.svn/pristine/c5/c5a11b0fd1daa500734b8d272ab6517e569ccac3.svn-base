package com.nexus.push.controller;

import java.net.HttpURLConnection;

import javax.net.ssl.HttpsURLConnection;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.nexus.push.domain.HttpStatusDomain;
import com.nexus.push.domain.PushDomain;
import com.nexus.push.httpClient.HttpResponseEntity;
import com.nexus.push.service.PushServiceImpl;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class PushController {
	
	@Autowired
	private PushServiceImpl pushService;
	
	static final String CODE_400_DATA_ERROR="Received data is null";
	static final String CODE_400_DEVICE_ERROR="Device name is android or ios";
	static final String CODE_400_TOKEN_ERROR="Token value is empty";
	/*@RequestMapping(value = "/nexus/push" , method = RequestMethod.POST)
	public ResponseEntity<HttpStatusDomain> push(@RequestBody PushDomain pushdomain,HttpServletRequest request, HttpServletResponse res){
		logger.info("컨트롤러 시작");
		HttpURLConnection httpResult=null;
		try{
			httpResult=pushService.fcmPush(pushdomain,request); 
			int resultCode=httpResult.getResponseCode();
			String resultMessage=httpResult.getResponseMessage();
			httpResult.disconnect();
			return new ResponseEntity<HttpStatusDomain>(new HttpStatusDomain(resultMessage,resultCode),HttpStatus.valueOf(resultCode));
		}catch(Exception e) {
			httpResult.disconnect();
			return new ResponseEntity<HttpStatusDomain>(new HttpStatusDomain(e.getMessage(),Integer.parseInt(HttpStatus.INTERNAL_SERVER_ERROR.toString())) , HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}*/
	@RequestMapping(value = "/nexus/push" , method = RequestMethod.POST)
	public ResponseEntity<HttpStatusDomain> push(@RequestBody PushDomain pushDomain,HttpServletRequest request, HttpServletResponse res){
		logger.info("PUSH EXECUTE!!!");
		HttpResponseEntity resResult = new HttpResponseEntity();
		//요청값 에러 리턴
		String error_message="";
		try{
			//NO DATA
			if(pushDomain==null) {
				logger.info("111");
				error_message=CODE_400_DATA_ERROR;
			}
			
			//NO DEVICE
			else if(pushDomain.getDevice()==null || pushDomain.getDevice().equals("")){			
				logger.info("222");
				error_message=CODE_400_DEVICE_ERROR;			
			}else if(!(pushDomain.getDevice().equals("ios") || pushDomain.getDevice().equals("android"))){
					error_message=CODE_400_DEVICE_ERROR;	
			}
			
			//NO DEVICE TOKEN
			else if(pushDomain.getDevice_token()==null || pushDomain.getDevice_token().equals("")) {
				logger.info("444");
				error_message=CODE_400_TOKEN_ERROR;
			}
			
			//PUSH START
			else {
				String pushResult="";
				switch(pushDomain.getDevice()) {
					case "ios" : 
						HttpStatusDomain hd=pushService.apnsPush(pushDomain);
						if(hd.getCode()==200) {
							return resResult.httpResponse("PUSH SUCCESS",200,error_message);
						}else if(hd.getCode()>=300) {
							error_message=hd.getErrorMessage();
							return resResult.httpResponse("PUSH FAIL",500,error_message);
						}
						break;
					case "android" : 
						pushResult=pushService.fcmPush(pushDomain);
						break;
				}
				
				//PUSH SUCCESS
				if(pushResult==null) {
					logger.info("PUSH SUCCESS");
					return resResult.httpResponse("PUSH SUCCESS",200,error_message);
				}
				
				//pushResult값에 값이 있을 경우 PUSH FAIL
				else {
					error_message=pushResult;
					logger.info("PUSH FAIL 400 error : "+error_message);
					return resResult.httpResponse("PUSH FAIL",400,error_message);
				}
			}
			logger.info("PUSH FAIL 400 error : "+error_message);
			return resResult.httpResponse("PUSH FAIL",400,error_message);
		}catch(Exception e) {
			e.printStackTrace();
			logger.info("PUSH FAIL 500 error : "+e.toString());
			return resResult.httpResponse("PUSH FAIL",500,e.toString());
		}
	}
}
